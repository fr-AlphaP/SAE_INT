services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    volumes:
      - ./site/:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - grafana-net


  postgres:
    image: postgres:15
    container_name: postgres_for_grafana
    restart: always
    environment:
      - POSTGRES_USER=grafana
      - POSTGRES_DB=grafana
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - grafana-net
    secrets:
       - db_password

  grafana:
    image: grafana/grafana-enterprise:${GRAFANA_VERSION}
    container_name: grafana
    restart: unless-stopped
    environment:
    # BDD
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_SSL_MODE=disable
      - GF_DATABASE_PASSWORD__FILE=/run/secrets/db_password
      # Grafana 
      - GF_SERVER_ROOT_URL=http://grafana.valentin-malot.fr
      - GF_PLUGINS_PREINSTALL=grafana-clock-panel
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SECURITY_ADMIN_USER__FILE=/run/secrets/GF_SECURITY_ADMIN_USER__FILE
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/GF_SECURITY_ADMIN_PASSWORD__FILE
   # ports:
    #  - '${GRAFANA_PORT}:3000' Remplacé par le reverse proxy, ne pas activer svp
    volumes:
      - grafana_storage:/var/lib/grafana
    secrets:
      - GF_SECURITY_ADMIN_USER__FILE
      - GF_SECURITY_ADMIN_PASSWORD__FILE
      - db_password
    depends_on:
      - influxdb2
      - postgres
    networks:
      - grafana-net
  
  influxdb2:
    image: influxdb:${INFLUXDB_VERSION}
    container_name: ${INFLUXDB_CONTAINER_NAME}
    restart: unless-stopped
    #ports:
     # - '80:8086' Idem que pour grafana, nginx fait le reverse proxy, ne pas décommenter ! 
    env_file:
      - ./.env
    secrets:
      - influxdb2-admin-username
      - influxdb2-admin-password
      - influxdb2-admin-token
    volumes:
      - influxdb2-data:/var/lib/influxdb2
      - influxdb2-config:/etc/influxdb2
    networks: 
       - grafana-net


  telegraf:
    build:
      context: .
      dockerfile: Dockerfile
      
    container_name: telegraf
    restart: always
    env_file:
      - ./.env
    secrets:
      - influxdb2-admin-token
    volumes:
      - ${TELEGRAF_CONF_FILE}:/etc/telegraf/telegraf.conf:ro
      - ./py/script.py:/scripts/script.py:ro
    depends_on:
      - influxdb2
    networks:
       - grafana-net
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - certbot_etc:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: renew --webroot -w /var/www/certbot --quiet --post-hook "docker-compose -f /path/to/your/docker-compose.yml restart nginx"

volumes:
  grafana_storage: {}
  influxdb2-data: {}
  influxdb2-config: {}
  postgres-data: {}
  certbot_etc: {}
  certbot_www: {}


secrets:
  influxdb2-admin-username:
    file: ./secrets/influxdb2-admin-username
  influxdb2-admin-password:
    file: ./secrets/influxdb2-admin-password
  influxdb2-admin-token:
    file: ./secrets/influxdb2-admin-token
  GF_SECURITY_ADMIN_USER__FILE:
    file: ./secrets/grafana-admin-username
  GF_SECURITY_ADMIN_PASSWORD__FILE:
    file: ./secrets/grafana-admin-password
  db_password:
      file: ./secrets/grafana-postgres-password

networks:
  grafana-net:
